"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var promises_1 = require("fs/promises");
var eslint_1 = require("eslint");
function default_1(args) {
    return __awaiter(this, void 0, void 0, function () {
        var fix, eslint, _a, results, _b, formatter, resultText, errorCount;
        var _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    fix = (args || []).indexOf("--fix") >= 0;
                    _a = eslint_1.ESLint.bind;
                    _c = {
                        fix: fix
                    };
                    return [4 /*yield*/, fileExists('.eslintrc.json')];
                case 1:
                    eslint = new (_a.apply(eslint_1.ESLint, [void 0, (_c.overrideConfigFile = (_d.sent()) ? ".eslintrc.json" : undefined,
                            _c)]))();
                    console.log('Running linter...');
                    return [4 /*yield*/, eslint.lintFiles([
                            "src/**/*.{ts,tsx}",
                            "test/**/*.{ts,tsx}",
                        ])];
                case 2:
                    results = _d.sent();
                    _b = fix;
                    if (!_b) return [3 /*break*/, 4];
                    return [4 /*yield*/, eslint_1.ESLint.outputFixes(results)];
                case 3:
                    _b = (_d.sent());
                    _d.label = 4;
                case 4:
                    _b;
                    return [4 /*yield*/, eslint.loadFormatter("stylish")];
                case 5:
                    formatter = _d.sent();
                    resultText = formatter.format(results);
                    resultText && console.log(resultText);
                    errorCount = results.reduce(function (c, r, i) { return c + r.errorCount; }, 0);
                    if (errorCount > 0) {
                        process.exit(1);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports["default"] = default_1;
var fileExists = function (path) { return __awaiter(void 0, void 0, void 0, function () {
    var _1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, (0, promises_1.stat)(path)];
            case 1: return [2 /*return*/, (_a.sent()).isFile()];
            case 2:
                _1 = _a.sent();
                return [2 /*return*/, false];
            case 3: return [2 /*return*/];
        }
    });
}); };
