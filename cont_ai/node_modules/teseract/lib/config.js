"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.getConfig = void 0;
var fs = __importStar(require("fs/promises"));
var p = __importStar(require("path"));
var superstruct_1 = require("superstruct");
var ConfigStruct = (0, superstruct_1.object)({
    profiles: (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.string)())),
    serve: (0, superstruct_1.object)({
        port: (0, superstruct_1.number)(),
        host: (0, superstruct_1.string)()
    }),
    style: (0, superstruct_1.object)({
        indentation: (0, superstruct_1.number)(),
        quotes: (0, superstruct_1.union)([(0, superstruct_1.literal)("double"), (0, superstruct_1.literal)("single")])
    }),
    build: (0, superstruct_1.object)({
        loaders: (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.union)([(0, superstruct_1.literal)("file"), (0, superstruct_1.literal)("other")])),
        externalDependencies: (0, superstruct_1.array)((0, superstruct_1.string)())
    })
});
var defaultConfig = {
    profiles: {},
    serve: {
        port: 8080,
        host: '0.0.0.0'
    },
    style: {
        indentation: 2,
        quotes: "double"
    },
    build: {
        loaders: {
            '.jpg': 'file',
            '.jpeg': 'file',
            '.png': 'file',
            '.gif': 'file',
            '.svg': 'file',
            '.ttf': 'file'
        },
        externalDependencies: []
    }
};
function getConfig() {
    return __awaiter(this, void 0, void 0, function () {
        var packageFilePath, packageFileData, _a, _b, config;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    packageFilePath = p.join(process.cwd(), 'package.json');
                    return [4 /*yield*/, fileExists(packageFilePath)];
                case 1:
                    if (!(_c.sent()))
                        return [2 /*return*/, defaultConfig];
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, fs.readFile(packageFilePath, { encoding: 'utf-8' })];
                case 2:
                    packageFileData = _b.apply(_a, [_c.sent()]);
                    if (!packageFileData.teseract)
                        return [2 /*return*/, defaultConfig];
                    config = merge(packageFileData.teseract, defaultConfig);
                    (0, superstruct_1.assert)(config, ConfigStruct);
                    return [2 /*return*/, config];
            }
        });
    });
}
exports.getConfig = getConfig;
function fileExists(path) {
    return __awaiter(this, void 0, void 0, function () {
        var _1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs.stat(path)];
                case 1: return [2 /*return*/, (_a.sent()).isFile()];
                case 2:
                    _1 = _a.sent();
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function merge(data, base) {
    var result = {};
    var keys = Array.from(new Set(__spreadArray(__spreadArray([], Object.keys(data), true), Object.keys(base), true)));
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        if (data[key] == null) {
            result[key] = base[key];
        }
        else {
            if (typeof base[key] === "object" && typeof data[key] === "object" && !Array.isArray(base[key])) {
                result[key] = merge(data[key], base[key]);
            }
            else {
                result[key] = data[key];
            }
        }
    }
    return result;
}
