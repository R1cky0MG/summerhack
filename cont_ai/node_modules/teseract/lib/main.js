"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var gen_1 = __importDefault(require("./commands/gen"));
var init_1 = __importDefault(require("./commands/init"));
var lint_1 = __importDefault(require("./commands/lint"));
var build_1 = __importDefault(require("./commands/build"));
var serve_1 = __importDefault(require("./commands/serve"));
var test_1 = __importDefault(require("./commands/test"));
var commands = {
    init: [init_1["default"], 'Generate initial files (will overwrite existing ones)'],
    serve: [serve_1["default"], 'Starts a HTTP server with live builds.'],
    lint: [lint_1["default"], 'Runs linter.'],
    build: [build_1["default"], 'Generates a complete build.'],
    release: [function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, lint_1["default"])([])];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, build_1["default"])([])];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }, 'Alias for lint and build'],
    test: [test_1["default"], 'Run unit tests'],
    gen: [gen_1["default"], 'Generate configuration files. This is done automatically before all other commands']
};
function main(args) {
    return __awaiter(this, void 0, void 0, function () {
        var command, commandArgs;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (args.length === 0)
                        return [2 /*return*/, printHelp()];
                    command = args[0], commandArgs = args.slice(1);
                    if (!commands[command]) {
                        console.log("Unknown command '".concat(command, "'"));
                    }
                    return [4 /*yield*/, (0, gen_1["default"])()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, commands[command][0](commandArgs)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function printHelp() {
    console.log('Usage: teseract <command>');
    console.log('');
    console.log('Available commands:');
    Object.keys(commands).forEach(function (command) {
        console.log("  ".concat(command, ": ").concat(commands[command][1]));
    });
}
main(process.argv.splice(2))
    .then(function () { }, function (err) { return console.log(err); });
