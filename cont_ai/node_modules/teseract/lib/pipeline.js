"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var util_1 = require("util");
var pathUtils = __importStar(require("path"));
var promises_1 = require("fs/promises");
var esbuild = __importStar(require("esbuild"));
var esbuild_plugin_sass_1 = __importDefault(require("esbuild-plugin-sass"));
var config_1 = require("./config");
function default_1(params) {
    return __awaiter(this, void 0, void 0, function () {
        var fileExists, directoryExists, result;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fileExists = _fileExists(params);
                    directoryExists = _directoryExists(params);
                    result = [];
                    return [4 /*yield*/, directoryExists(['src', 'static'])];
                case 1:
                    (_a.sent()) && result.push(function () { return __awaiter(_this, void 0, void 0, function () {
                        var _a, _b;
                        var _c;
                        var _this = this;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    _c = {};
                                    _b = (_a = Promise).all;
                                    return [4 /*yield*/, getFilesRecursively(p([params.workDir, 'src', 'static']))];
                                case 1: return [4 /*yield*/, _b.apply(_a, [(_d.sent())
                                            .map(function (path) { return (function (p) { return __awaiter(_this, void 0, void 0, function () {
                                            var _a;
                                            var _b;
                                            return __generator(this, function (_c) {
                                                switch (_c.label) {
                                                    case 0:
                                                        _b = {
                                                            path: p
                                                        };
                                                        _a = Uint8Array.bind;
                                                        return [4 /*yield*/, (0, promises_1.readFile)(p)];
                                                    case 1: return [2 /*return*/, (_b.data = new (_a.apply(Uint8Array, [void 0, _c.sent()]))(),
                                                            _b)];
                                                }
                                            });
                                        }); })(path); })])];
                                case 2: return [2 /*return*/, (_c.resources = (_d.sent())
                                        .map(function (o) { return (__assign(__assign({}, o), { path: '/' + pathUtils.relative(p([params.workDir, 'src', 'static']), o.path) })); }),
                                        _c.errors = [],
                                        _c)];
                            }
                        });
                    }); });
                    return [4 /*yield*/, fileExists(["src", "main.ts"])];
                case 2:
                    (_a.sent()) && result.push(function () { return __awaiter(_this, void 0, void 0, function () {
                        var config, activeProfile, result_1, err_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, (0, config_1.getConfig)()];
                                case 1:
                                    config = _a.sent();
                                    activeProfile = process.env.TESERACT_PROFILE
                                        ? config.profiles[process.env.TESERACT_PROFILE]
                                        : {};
                                    _a.label = 2;
                                case 2:
                                    _a.trys.push([2, 4, , 5]);
                                    return [4 /*yield*/, esbuild.build({
                                            entryPoints: ["".concat(params.workDir, "/src/main.ts")],
                                            entryNames: '[dir]/[name]-[hash]',
                                            define: activeProfile,
                                            target: "es2016",
                                            sourcemap: true,
                                            outdir: '/',
                                            minify: true,
                                            bundle: true,
                                            write: false,
                                            logLevel: 'silent',
                                            external: params.externalDependencies,
                                            loader: toObject(Object.entries(config.build.loaders).filter(function (_a) {
                                                var _ = _a[0], type = _a[1];
                                                return type === 'file';
                                            }).map(function (_a) {
                                                var ext = _a[0];
                                                return ext;
                                            }).map(function (ext) { return ([
                                                ext,
                                                'file'
                                            ]); })),
                                            plugins: [
                                                (0, esbuild_plugin_sass_1["default"])()
                                            ]
                                        })];
                                case 3:
                                    result_1 = _a.sent();
                                    return [2 /*return*/, {
                                            resources: result_1.outputFiles.map(function (f) { return ({
                                                path: f.path,
                                                data: f.contents
                                            }); }),
                                            errors: []
                                        }];
                                case 4:
                                    err_1 = _a.sent();
                                    return [2 /*return*/, {
                                            resources: [],
                                            errors: err_1.errors.map(function (e) { return ({
                                                file: e.detail && e.detail.file
                                                    ? pathUtils.relative(params.workDir, e.detail.file)
                                                    : "".concat(e.location.file, ":").concat(e.location.line, ":").concat(e.location.column),
                                                text: e.text
                                            }); })
                                        }];
                                case 5: return [2 /*return*/];
                            }
                        });
                    }); });
                    return [4 /*yield*/, fileExists(["src", "index.html"])];
                case 3:
                    (_a.sent()) && result.push(function (resources) { return __awaiter(_this, void 0, void 0, function () {
                        var cssFiles, jsFiles, index;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    cssFiles = resources.filter(function (r) { return r.path.endsWith('.css'); });
                                    jsFiles = resources.filter(function (r) { return r.path.endsWith('.js'); });
                                    return [4 /*yield*/, (0, promises_1.readFile)(p([params.workDir, 'src', 'index.html']), { encoding: 'utf-8' })];
                                case 1:
                                    index = (_a.sent())
                                        .replace('<!-- teseract:css -->', cssFiles.map(function (c) { return "<link rel=\"stylesheet\" href=\"".concat(c.path, "\" />"); }).join(''))
                                        .replace('<!-- teseract:js -->', jsFiles.map(function (c) { return "<script type=\"text/javascript\" src=\"".concat(c.path, "\"></script>"); }).join(''));
                                    return [2 /*return*/, {
                                            resources: [{
                                                    path: '/index.html',
                                                    data: new util_1.TextEncoder().encode(index)
                                                }],
                                            errors: []
                                        }];
                            }
                        });
                    }); });
                    return [2 /*return*/, result];
            }
        });
    });
}
exports["default"] = default_1;
function getFilesRecursively(directory) {
    return __awaiter(this, void 0, void 0, function () {
        var result, files, _i, files_1, file, filePath, _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    result = [];
                    return [4 /*yield*/, (0, promises_1.readdir)(directory, { withFileTypes: true })];
                case 1:
                    files = _d.sent();
                    _i = 0, files_1 = files;
                    _d.label = 2;
                case 2:
                    if (!(_i < files_1.length)) return [3 /*break*/, 6];
                    file = files_1[_i];
                    filePath = pathUtils.resolve(directory, file.name);
                    if (!file.isDirectory()) return [3 /*break*/, 4];
                    _b = (_a = result.push).apply;
                    _c = [result];
                    return [4 /*yield*/, getFilesRecursively(filePath)];
                case 3:
                    _b.apply(_a, _c.concat([_d.sent()]));
                    return [3 /*break*/, 5];
                case 4:
                    result.push(filePath);
                    _d.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 2];
                case 6: return [2 /*return*/, result];
            }
        });
    });
}
var _fileExists = function (params) {
    return function (chunks) { return __awaiter(void 0, void 0, void 0, function () {
        var _1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, (0, promises_1.stat)(p(__spreadArray([params.workDir], chunks, true)))];
                case 1: return [2 /*return*/, (_a.sent()).isFile()];
                case 2:
                    _1 = _a.sent();
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    }); };
};
var _directoryExists = function (params) {
    return function (chunks) { return __awaiter(void 0, void 0, void 0, function () {
        var _2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, (0, promises_1.stat)(p(__spreadArray([params.workDir], chunks, true)))];
                case 1: return [2 /*return*/, (_a.sent()).isDirectory()];
                case 2:
                    _2 = _a.sent();
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    }); };
};
var toObject = function (data) {
    var result = {};
    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
        var entry = data_1[_i];
        result[entry[0]] = entry[1];
    }
    return result;
};
var p = function (chunks) { return pathUtils.join.apply(pathUtils, chunks); };
